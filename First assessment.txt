SELECT * FROM employees;
SELECT * FROM departments;
SELECT * FROM dept_emp;
SELECT * FROM dept_manager;
SELECT * FROM salaries;
SELECT * FROM titles;


1      Create an SQL statement that lists all managers and their title

CREATE OR REPLACE VIEW manager_title AS 
SELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name, title, e.emp_no
FROM employees e
INNER JOIN dept_manager dm ON dm.emp_no = e.emp_no
LEFT JOIN titles t ON t.emp_no = e.emp_no
ORDER BY last_name;

SELECT * FROM manager_title;

Analysing the data I think this should be returning 8 rows, however it is only returning 4. On further inspection of the tables I can see that the titles table seems to have errors, with duplicated employee numbers (emp_no), there are also 14 employees and only 11 rows for title, so 3 employees are missing titles. Statement updated to allow for NULLS. 



2     Create a SQL statement to show the salary of all employees and their department name.

CREATE OR REPLACE VIEW employees_dept AS 
SELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name, dept_name, e.emp_no, s.salary
FROM employees e
LEFT JOIN dept_emp demp ON demp.emp_no = e.emp_no
LEFT JOIN salaries s ON e.emp_no = s.emp_no
LEFT JOIN departments d ON d.dept_no = demp.dept_no
ORDER BY last_name;

SELECT * FROM employees_dept;


Again in this case there is missing information, only 7 employees are accounted for in the dept_emp table meaning only 7 employees are listed in the joined table furthermore there is a duplicate employee number in the salaries table meaning there are only 7 valid entries (8 entries in total, 1 unaccounted for). Statement updated to allow for NULLS. Employee ID 10001 also has 2 differing salaries associated with them 



3      Create a SQL statement to show the hire date and birth date who belongs to HR department.

CREATE OR REPLACE VIEW hr_bday AS
SELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name, e.birth_date, e.hire_date, d.dept_name, demp.dept_no
FROM employees e
INNER JOIN dept_emp demp ON demp.emp_no = e.emp_no
INNER JOIN departments d ON d.dept_no = demp.dept_no
	WHERE d.dept_no = 'd003'
UNION 
SELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name, e.birth_date, e.hire_date, d.dept_name, dman.dept_no
FROM employees e
INNER JOIN dept_manager dman ON dman.emp_no = e.emp_no
INNER JOIN departments d ON d.dept_no = dman.dept_no
	WHERE d.dept_no = 'd003'
ORDER BY birth_date;

SELECT * FROM hr_bday;


(alternatively for the WHERE statement; WHERE d.dept_name = 'Human Resources'

I had to choose the information from two seperate tables 'dept_manager' and 'dept_emp' as they were the only tables that had human resources members in there. The table 'titles' has no human resource member, facilitating the need for 2 INNER JOINS and a UNION to two tables to gather all the relevent information.



4      Create a SQL statement to show all departments and their department’s managers.

CREATE OR REPLACE VIEW dept_info AS
SELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name, dep.dept_name, dman.dept_no, e.emp_no
FROM departments d
LEFT JOIN dept_manager dman ON dman.dept_no = d.dept_no
RIGHT JOIN employees dep ON e.emp_no = dman.emp_no;

SELECT * FROM dept_info;

Some departments are missing managers and others have more than one manager in the dataset, so not every department is accounted for. Also many people listed as managers are also listed as employees based on their employee numbers - some are also tied to multiple departments. 



5      Create a SQL statement to show a list of HR’s employees who were hired after 1986

CREATE OR REPLACE VIEW hr_hire_date AS
SELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name, demp.from_date, d.dept_name, demp.dept_no
FROM employees e
INNER JOIN dept_emp demp ON demp.emp_no = e.emp_no
INNER JOIN departments d ON d.dept_no = demp.dept_no
	WHERE demp.from_date > '1986-01-01'
	AND d.dept_name = 'Human Resources'
UNION
SELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name, dman.from_date, d.dept_name, dman.dept_no
FROM employees e
INNER JOIN dept_manager dman ON dman.emp_no = e.emp_no
INNER JOIN departments d ON d.dept_no = dman.dept_no
	WHERE dman.from_date > '1986-01-01'
	AND d.dept_name = 'Human Resources'
ORDER BY from_date;

SELECT * FROM hr_hire_date;

The people listed as HR employees all have hire dates starting later than 1986 according to the employees table, however the start date is different according to the 'from_date' columns so I am using the 'from_date' from the respective dept_emp and dept_manager tables as I assume they may have changed roles and become a HR employee later.



6      Create a SQL statement to increase any employee’s salary up to 2%. Assume the employee has just phoned in with his/her last name.


CREATE OR REPLACE TEMPORARY TABLE pay_rise AS
SELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name, salary
FROM employees e
LEFT JOIN salaries s ON s.emp_no = e.emp_no
ORDER BY salary;

SELECT * FROM pay_rise;

UPDATE pay_rise
	SET salary as salary_update= salary*1.02
ORDER BY salary;

SELECT * FROM pay_rise;



7      Create a SQL statement to delete employee’s record who belongs to marketing department and name start with A


CREATE OR REPLACE TEMPORARY TABLE delete_a AS
SELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name, d.dept_name
FROM employees e
INNER JOIN dept_emp demp ON demp.emp_no = e.emp_no
INNER JOIN departments d ON d.dept_no = demp.dept_no
UNION ALL
SELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name, d.dept_name
FROM employees e
INNER JOIN dept_manager dman ON dman.emp_no = e.emp_no
INNER JOIN departments d ON d.dept_no = dman.dept_no
ORDER BY first_name;

SELECT * FROM delete_a;

DELETE FROM delete_a
	WHERE dept_name = 'Marketing'
	OR full_name LIKE 'A%'
ORDER BY full_name;

SELECT * FROM delete_a;



8       Create a database view to list the full names of all departments’ managers, and their salaries.



CREATE OR REPLACE VIEW manager_sal AS
SELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name, s.salary, e.emp_no
FROM employees e
LEFT JOIN salaries s ON s.emp_no = e.emp_no
INNER JOIN dept_manager dman ON dman.emp_no = e.emp_no
ORDER BY salary;

SELECT * FROM manager_sal;

In this case, we can only return the rows for which the employee ids match, meaning a lot of manager salaries are not accounted for and because of a duplicate ID one row is being returned twice. 



9      Create a database view to list all departments and their department’s managers, who were hired between 1980 and 1990.



CREATE OR REPLACE VIEW dept_man_1980_to_1990 AS
SELECT CONCAT(e.first_name, ' ', e.last_name), d.dept_name, d.dept_no, e.hire_date, e.emp_no
FROM departments d
LEFT JOIN dept_manager dman ON dman.dept_no = d.dept_no
LEFT JOIN employees e ON e.emp_no = dman.emp_no
	WHERE hire_date BETWEEN '1980-01-01' AND '1990-01-01'
ORDER BY last_name;

SELECT * FROM dept_man_1980_to_1990;


The BETWEEN statement doesn't allow for null values on the date, I have looked into adding and IsNull condition to the statement however it hasn't worked yet. 



10      Create a SQL statement to increase salaries of all department’s managers up to 10% who are working since 1990.



CREATE OR REPLACE TEMPORARY TABLE manager_sal_1990_increase AS
SELECT CONCAT(e.first_name, ' ', e.last_name) AS full_name, s.salary, e.emp_no, e.hire_date
FROM employees e
LEFT JOIN salaries s ON s.emp_no = e.emp_no
INNER JOIN dept_manager dman ON dman.emp_no = e.emp_no
ORDER BY salary;

SELECT * FROM manager_sal_1990_increase;

UPDATE manager_sal_1990_increase
	SET salary = salary*1.10
		WHERE hire_date >= '1990-01-01'
ORDER BY salary;

SELECT * FROM manager_sal_1990_increase;